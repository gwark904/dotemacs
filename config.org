#+TITLE: config.org --- My personal GNU Emacs config
#+DATE: <2017-06-13 Tue>
#+AUTHOR: Geoffrey T. Wark
#+EMAIL: geoff@geoffwark.com

* First Things First

Prevent customization settings from appending junk to this file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file :noerror)
#+END_SRC

Prevent Emacs clutter by moving backup/autosave files to system's tempdir

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

Always install MELPA packages automatically if not already present on the system.

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

* User Interface
** Free up screen real estate

The following toolbars take up unnecessary space:

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

** Theme

[[http://kippura.org/zenburnpage/][Zenburn]] is pretty easy on the eyes.

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :init
    (load-theme 'zenburn t))
#+END_SRC

** Cursor

Make the cursor bright red so that it's more easy to track.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(cursor-color . "red"))
#+END_SRC

Also stop that goddamn blinking!

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC

** Face

Italicize comments.

#+BEGIN_SRC emacs-lisp
  (make-face-italic 'font-lock-comment-face)
#+END_SRC

Make region (selection) colors more obvious.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'region nil
                      :background "white smoke"
                      :foreground "black")
#+END_SRC

** Font

[[https://pagure.io/liberation-fonts][Liberation Fonts]] are pretty dope.  Be sure you have them installed.

#+BEGIN_SRC emacs-lisp
  ;; TODO make this compatiable with daemon/terminal/Windows emacs

  ;; SOURCE= https://www.emacswiki.org/emacs/SetFonts
  ;; (defun font-exists-p (font)
  ;;   "Check if a particular font is present on the system.

  ;; Returns a BOOLEAN"
  ;;   (if (null (x-list-fonts font))
  ;;       nil t))

  ;; (if (font-exists-p "Liberation Mono")
      (add-to-list 'default-frame-alist '(font . "Liberation Mono"));)
#+END_SRC

* Indentation
** Default

Don't use tabs.  You can still insert a tab if needed with =C-q tab=

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Use 2 space widths per indent.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

** WebDev

Use 2 spaces for everything.  These need to be explicitly set for some dumb reason.

#+BEGIN_SRC emacs-lisp
  (setq css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-script-padding 2)
  (setq web-mode-style-padding 2)
#+END_SRC

* Sane Defaults

Most of these settings come from [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnar Sveen]] or [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Daniel Mai]].

#+BEGIN_SRC emacs-lisp
  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top

  ;; Auto refresh buffers
  (global-auto-revert-mode 1)

  ;; Don't beep at me
  (setq visible-bell t)

  ;; Remove text in active region if inserting text
  (delete-selection-mode 1)

  ;; Show me empty lines after buffer end
  (set-default 'indicate-empty-lines t)

  ;; Easily navigate sillycased words
  (global-subword-mode 1)

  ;; Don't break lines for me, please
  (setq-default truncate-lines t)

  ;; Allow recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Focus the current line.
  (global-hl-line-mode t)

  ;; Display column numbers in the mode line.
  (setq column-number-mode t)

  ;; Show keystrokes in progress
  (setq echo-keystrokes 0.1)

  ;; Move files to trash when deleting
  (setq delete-by-moving-to-trash t)

  ;; Real emacs knights don't use shift to mark things
  (setq shift-select-mode nil)

  ;; Sentences do not need double spaces to end. Period.
  (set-default 'sentence-end-double-space nil)
#+END_SRC

* Custom Functions
** Mine

Insert and go to a newline from anywhere in the current line.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-n") '(lambda ()
                                 (interactive)
                                 (end-of-line)
                                 (newline-and-indent)))
#+END_SRC

Streamlink (useful for watching Twitch.tv)

#+BEGIN_SRC emacs-lisp
  (defun streamlink (link quality)
    (interactive "sLink: \nsQuality? ")
    (async-shell-command (concat "streamlink " link " " quality)))
#+END_SRC

** Borrowed

[[https://www.emacswiki.org/emacs/MoveLine][Move Line]]

#+BEGIN_SRC emacs-lisp
  (defun move-line (n)
    "Move the current line up or down by N lines."
    (interactive "p")
    (setq col (current-column))
    (beginning-of-line) (setq start (point))
    (end-of-line) (forward-char) (setq end (point))
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      ;; restore point to original column in moved line
      (forward-line -1)
      (forward-char col)))

  (defun move-line-up (n)
    "Move the current line up by N lines."
    (interactive "p")
    (move-line (if (null n) -1 (- n))))

  (defun move-line-down (n)
    "Move the current line down by N lines."
    (interactive "p")
    (move-line (if (null n) 1 n)))

  (global-set-key (kbd "M-<up>") 'move-line-up)
  (global-set-key (kbd "M-<down>") 'move-line-down)
#+END_SRC

Automatically Create Parent Directories on Visiting a New File in Emacs (credit to [[http://iqbalansari.me/blog/2014/12/07/automatically-create-parent-directories-on-visiting-a-new-file-in-emacs/][Iqbal Ansari]])

#+BEGIN_SRC emacs-lisp
  (defun my-create-non-existent-directory ()
        (let ((parent-directory (file-name-directory buffer-file-name)))
          (when (and (not (file-exists-p parent-directory))
                     (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
            (make-directory parent-directory t))))

  (add-to-list 'find-file-not-found-functions #'my-create-non-existent-directory)
#+END_SRC

editing with root-privileges -- once more ([[https://emacs-fu.blogspot.com/2013/03/editing-with-root-privileges-once-more.html][credit]])

#+BEGIN_SRC emacs-lisp
  (defun djcb-find-file-as-root ()
    "Like `ido-find-file, but automatically edit the file with
  root-privileges (using tramp/sudo), if the file is not writable by
  user."
    (interactive)
    (let ((file (ido-read-file-name "Edit as root: ")))
      (unless (file-writable-p file)
        (setq file (concat "/sudo:root@localhost:" file)))
      (find-file file)))
  ;; or some other keybinding...
  (global-set-key (kbd "C-x F") 'djcb-find-file-as-root)
#+END_SRC

Rename file and buffer ([[https://rejeep.github.io/emacs/elisp/2010/03/26/rename-file-and-buffer-in-emacs.html][credit]])

#+BEGIN_SRC emacs-lisp
  (defun rename-this-buffer-and-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (cond ((get-buffer new-name)
                 (error "A buffer named '%s' already exists!" new-name))
                (t
                 (rename-file filename new-name 1)
                 (rename-buffer new-name)
                 (set-visited-file-name new-name)
                 (set-buffer-modified-p nil)
                 (message "File '%s' successfully renamed to '%s'" name (file-name-nondirectory new-name))))))))

  (global-set-key (kbd "C-c r") 'rename-this-buffer-and-file)
#+END_SRC

* Packages
** eshell

Turn off some undesirable minor modes

#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-mode-hook (lambda ()
                               (company-mode -1)
                               (toggle-truncate-lines)))
#+END_SRC

** winner-mode

Winner Mode is a global minor mode. When activated, it allows you to \u201cundo\u201d (and \u201credo\u201d) changes in the window configuration with the key commands =C-c left= and =C-c right=

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

** MELPA
*** anzu

Show number of matches in mode-line while searching

#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :diminish anzu-mode
    :init
    (global-anzu-mode t))
#+END_SRC

*** ace-jump-mode

a quick cursor location minor mode for emacs

#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :diminish ace-jump-mode
    :init
    (define-key global-map (kbd "C-c SPC") 'ace-jump-mode))
#+END_SRC

*** ace-window

Quickly switch windows.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind ("M-p" . ace-window)
    :config
    (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s)))
#+END_SRC

*** auctex

Sophisticated document creation

#+BEGIN_SRC emacs-lisp
  ;; AUCTeX doesn't play nice with use-package...
  (unless (package-installed-p 'auctex)
    (package-refresh-contents)
    (package-install 'auctex))

  (require 'latex)
#+END_SRC

**** latex-preview-pane

Makes LaTeX editing less painful by providing a updatable preview pane

#+BEGIN_SRC emacs-lisp
  (use-package latex-preview-pane
    :config
    (latex-preview-pane-enable))
#+END_SRC

*** company

Modular text completion framework

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

**** company-emoji

company-mode backend for emoji

#+BEGIN_SRC emacs-lisp
  (use-package company-emoji
    :config
    (add-to-list 'company-backends 'company-emoji))
#+END_SRC

**** company-auctex

Company-mode auto-completion for AUCTeX

#+BEGIN_SRC emacs-lisp
  (use-package company-auctex
    :init
    (company-auctex-init))
#+END_SRC

*** embrace

Add/Change/Delete pairs based on `expand-region'

#+BEGIN_SRC emacs-lisp
  (use-package embrace
    :init
    (global-set-key (kbd "C-,") #'embrace-commander)
    (add-hook 'org-mode-hook #'embrace-org-mode-hook))
#+END_SRC

*** emojify

Display emojis in Emacs

#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :init
    (add-hook 'after-init-hook #'global-emojify-mode))
#+END_SRC

*** expand-region

Increase selected region by semantic units.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+END_SRC

*** fill-column-indicator

Graphically indicate the fill column

#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :init
    (setq-default fill-column 80)
    (setq fci-rule-color "pink")
    (setq fci-rule-width 1)
    (add-hook 'prog-mode-hook (lambda ()
                                (unless (eq major-mode 'web-mode)
                                  (fci-mode)))))
#+END_SRC

*** flycheck

On-the-fly syntax checking

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC

*** flyspell

On-the-fly spell checking

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :diminish flyspell-mode
    :init
    (setq flyspell-issue-message-flag nil)
    :config
    ;; Disable some keybindings so that they do not conflict with other modes.
    (define-key flyspell-mode-map (kbd "C-,") nil) ; embrace
    
    (add-hook 'text-mode-hook 'flyspell-mode))
#+END_SRC

*** fringe-helper

helper functions for fringe bitmaps

#+BEGIN_SRC emacs-lisp
  (use-package fringe-helper)
#+END_SRC

*** git-gutter-fringe

Fringe version of git-gutter.el

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :diminish git-gutter-mode
    :config
    (set-face-foreground 'git-gutter-fr:added "green")
    (set-face-foreground 'git-gutter-fr:deleted "blue")
    (set-face-foreground 'git-gutter-fr:modified "yellow")
    (global-git-gutter-mode t))
#+END_SRC

*** hl-indent

Highlight irregular indentation.

#+BEGIN_SRC emacs-lisp
  (use-package hl-indent
    :init
    (add-hook 'prog-mode-hook 'hl-indent-mode)
    :config
    (set-face-background 'hl-indent-face "gray27"))
#+END_SRC

*** ido

InteractivelyDoThings

#+BEGIN_SRC emacs-lisp
  (use-package ido
    :init
    (use-package ido-complete-space-or-hyphen)
    (setq ido-everywhere t)
    (ido-mode t)
    (use-package ido-vertical-mode
      :init
      (ido-vertical-mode t)
      (setq ido-vertical-define-keys 'C-n-and-C-p-only))
    (use-package flx-ido
      :init
      (flx-ido-mode 1)
      ;; disable ido faces to see flx highlights.
      (setq ido-enable-flex-matching t)
      (setq ido-use-faces nil)))
#+END_SRC

_NOTE:_ Make this prettier :(

*** magit

A Git porcelain inside Emacs

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-c g" . magit-status)
    :config
    ;; full screen magit-status
    ;; SOURCE= http://whattheemacsd.com/setup-magit.el-01.html

    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))

    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen))

    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+END_SRC

*** multiple-cursors

Multiple cursors for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind (("C-c M" . mc/edit-lines)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

*** nyan-mode

Nyan Cat shows position in current buffer in mode-line.

#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :init
    (nyan-mode t))
#+END_SRC

*** Org-mode related



Disable some keybindings so that they do not conflict with other modes.

#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "C-c SPC") nil) ; ace-jump-mode
  (define-key org-mode-map (kbd "C-,") nil) ; embrace
#+END_SRC

*** page-break-lines

Display ugly ^L page breaks as tidy horizontal lines

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :diminish page-break-lines-mode
    :init
    (global-page-break-lines-mode))
#+END_SRC

*** projectile

Manage and navigate projects in Emacs easily

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (projectile-global-mode))
#+END_SRC

*** rainbow-delimiters

Highlight brackets according to their depth

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

*** simpleclip

Simplified access to the system clipboard

#+BEGIN_SRC emacs-lisp
  (use-package simpleclip
    :bind (("C-c C-1" . simpleclip-copy)
           ("C-c C-2" . simpleclip-cut)
           ("C-c C-3" . simpleclip-paste))
    :init
    (simpleclip-mode t))
#+END_SRC

*** smartparens

Automatic insertion, wrapping and paredit-like navigation with user defined pairs.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :diminish smartparens-mode
    :init
    (require 'smartparens-config)
    (smartparens-global-mode t))
#+END_SRC

*** smex

M-x interface with Ido-style fuzzy matching.

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :bind (("M-x" . smex)
           ("M-X" . smex-major-mode-commands)
           ("C-c C-c M-x" . execute-extended-command))
    :init
    (smex-initialize))
#+END_SRC

*** web-mode

major mode for editing web templates

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode ("\\.html?\\'"
           "\\.phtml\\'"
           "\\.tpl\\.php\\'"
           "\\.[agj]sp\\'"
           "\\.as[cp]x\\'"
           "\\.erb\\'"
           "\\.mustache\\'"
           "\\.djhtml\\'")
    :init
    (progn
      (setq web-mode-enable-auto-closing t)
      (setq web-mode-enable-auto-pairing t)

      (setq web-mode-enable-html-entities-fontification t)
      
      (add-hook 'web-mode-hook (lambda ()
                                 (smartparens-mode -1)
                                 (toggle-truncate-lines)
                                 (setq visible-lines t)
                                 (flyspell-prog-mode))))
    :config
    (set-face-foreground 'web-mode-html-entity-face "gray50"))
#+END_SRC

*** which-key

Display available keybindings in popup

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :init
    (setq which-key-idle-delay 1.5)
    (which-key-mode))
#+END_SRC

** MANUAL
*** pianobar.el

Run Pandora as an inferior process in emacs by using pianobar 

#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/workspace/elisp/pianobar.el/pianobar.el")
      (progn
        (add-to-list 'load-path "~/workspace/elisp/pianobar.el/")
        (autoload 'pianobar "pianobar" nil t)

        (add-hook 'pianobar-mode-hook '(lambda ()
                                         (setq truncate-lines nil)))))
#+END_SRC
*** visible-lines.el

move across visible lines instead of logic lines

#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/workspace/elisp/visible-lines.el/visible-lines.el")
      (progn
        (add-to-list 'load-path "~/workspace/elisp/visible-lines.el/")
        (require 'visible-lines)))
#+END_SRC

** Extra Diminishes

#+BEGIN_SRC emacs-lisp
  (diminish 'subword-mode)
  (diminish 'auto-revert-mode)
  (diminish 'visual-line-mode)
#+END_SRC

* Finishing Touches

Maximize and split the frame at startup.  Sourced from... some old, random Stack Overflow thread.

#+BEGIN_SRC emacs-lisp
  (defun max-n-split-frame (&optional frame)
    "a bad workaround"
    (interactive)
    (with-selected-frame (or frame (selected-frame))
      (toggle-frame-maximized)
      (split-window-right)))

  ;; GUI
  (if window-system
      (max-n-split-frame))
  ;; daemon
  (add-hook 'after-make-frame-functions 'max-n-split-frame)
#+END_SRC

** Confirm Load

http://www.patorjk.com/software/taag/

#+BEGIN_SRC emacs-lisp
  (message "
         \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593 \u2588\u2588\u2593  \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2593 \u2592\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2584    \u2588      
        \u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592\u2593\u2588\u2588\u2592\u2592\u2588\u2588    \u2592 \u2592\u2588\u2588    \u2592 \u2593\u2588\u2588\u2592\u2592\u2588\u2588\u2592  \u2588\u2588\u2592 \u2588\u2588 \u2580\u2588   \u2588      
        \u2593\u2588\u2588    \u2593\u2588\u2588\u2591\u2592\u2588\u2588\u2592\u2591 \u2593\u2588\u2588\u2584   \u2591 \u2593\u2588\u2588\u2584   \u2592\u2588\u2588\u2592\u2592\u2588\u2588\u2591  \u2588\u2588\u2592\u2593\u2588\u2588  \u2580\u2588 \u2588\u2588\u2592     
        \u2592\u2588\u2588    \u2592\u2588\u2588 \u2591\u2588\u2588\u2591  \u2592   \u2588\u2588\u2592  \u2592   \u2588\u2588\u2592\u2591\u2588\u2588\u2591\u2592\u2588\u2588   \u2588\u2588\u2591\u2593\u2588\u2588\u2592  \u2590\u258c\u2588\u2588\u2592     
        \u2592\u2588\u2588\u2592   \u2591\u2588\u2588\u2592\u2591\u2588\u2588\u2591\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2591\u2588\u2588\u2591\u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2588\u2588\u2591   \u2593\u2588\u2588\u2591     
        \u2591 \u2592\u2591   \u2591  \u2591\u2591\u2593  \u2592 \u2592\u2593\u2592 \u2592 \u2591\u2592 \u2592\u2593\u2592 \u2592 \u2591\u2591\u2593  \u2591 \u2592\u2591\u2592\u2591\u2592\u2591 \u2591 \u2592\u2591   \u2592 \u2592      
        \u2591  \u2591      \u2591 \u2592 \u2591\u2591 \u2591\u2592  \u2591 \u2591\u2591 \u2591\u2592  \u2591 \u2591 \u2592 \u2591  \u2591 \u2592 \u2592\u2591 \u2591 \u2591\u2591   \u2591 \u2592\u2591     
        \u2591      \u2591    \u2592 \u2591\u2591  \u2591  \u2591  \u2591  \u2591  \u2591   \u2592 \u2591\u2591 \u2591 \u2591 \u2592     \u2591   \u2591 \u2591      
               \u2591    \u2591        \u2591        \u2591   \u2591      \u2591 \u2591           \u2591      
                                                                      
   \u2584\u2588\u2588\u2588\u2588\u2584   \u2592\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593 \u2588\u2588\u2593\u2588\u2588\u2588   \u2588\u2588\u2593    \u2593\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2588 
  \u2592\u2588\u2588\u2580 \u2580\u2588  \u2592\u2588\u2588\u2592  \u2588\u2588\u2592\u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592\u2593\u2588\u2588\u2591  \u2588\u2588\u2592\u2593\u2588\u2588\u2592    \u2593\u2588   \u2580\u2593  \u2588\u2588\u2592 \u2593\u2592\u2593\u2588   \u2580 
  \u2592\u2593\u2588    \u2584 \u2592\u2588\u2588\u2591  \u2588\u2588\u2592\u2593\u2588\u2588    \u2593\u2588\u2588\u2591\u2593\u2588\u2588\u2591 \u2588\u2588\u2593\u2592\u2592\u2588\u2588\u2591    \u2592\u2588\u2588\u2588  \u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\u2592\u2588\u2588\u2588   
  \u2592\u2593\u2593\u2584 \u2584\u2588\u2588\u2592\u2592\u2588\u2588   \u2588\u2588\u2591\u2592\u2588\u2588    \u2592\u2588\u2588 \u2592\u2588\u2588\u2584\u2588\u2593\u2592 \u2592\u2592\u2588\u2588\u2591    \u2592\u2593\u2588  \u2584\u2591 \u2593\u2588\u2588\u2593 \u2591 \u2592\u2593\u2588  \u2584 
  \u2592 \u2593\u2588\u2588\u2588\u2580 \u2591\u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2588\u2588\u2592   \u2591\u2588\u2588\u2592\u2592\u2588\u2588\u2592 \u2591  \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2592\u2588\u2588\u2588\u2588\u2592 \u2592\u2588\u2588\u2592 \u2591 \u2591\u2592\u2588\u2588\u2588\u2588\u2592
  \u2591 \u2591\u2592 \u2592  \u2591\u2591 \u2592\u2591\u2592\u2591\u2592\u2591 \u2591 \u2592\u2591   \u2591  \u2591\u2592\u2593\u2592\u2591 \u2591  \u2591\u2591 \u2592\u2591\u2593  \u2591\u2591\u2591 \u2592\u2591 \u2591 \u2592 \u2591\u2591   \u2591\u2591 \u2592\u2591 \u2591
    \u2591  \u2592     \u2591 \u2592 \u2592\u2591 \u2591  \u2591      \u2591\u2591\u2592 \u2591     \u2591 \u2591 \u2592  \u2591 \u2591 \u2591  \u2591   \u2591     \u2591 \u2591  \u2591
  \u2591        \u2591 \u2591 \u2591 \u2592  \u2591      \u2591   \u2591\u2591         \u2591 \u2591      \u2591    \u2591         \u2591   
  \u2591 \u2591          \u2591 \u2591         \u2591                \u2591  \u2591   \u2591  \u2591           \u2591  \u2591
  \u2591                                                                   
  ")
#+END_SRC
