#+TITLE: config.org --- My personal GNU Emacs config
#+DATE: <2017-06-13 Tue>
#+AUTHOR: Geoffrey T. Wark
#+EMAIL: geoff@geoffwark.com

* First Things First

Prevent customization settings from appending junk to this file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file :noerror)
#+END_SRC

Prevent Emacs clutter by moving backup/autosave files to system's tempdir

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

Always install MELPA packages automatically if not already present on the system.

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

* User Interface
** Free up screen real estate

The following toolbars take up unnecessary space:

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

** Theme

[[http://kippura.org/zenburnpage/][Zenburn]] is pretty easy on the eyes.

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :init
    (load-theme 'zenburn t))
#+END_SRC

** Cursor

Make the cursor bright red so that it's more easy to track.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(cursor-color . "red"))
#+END_SRC

Also stop that goddamn blinking!

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC

** Face

Italicize comments.

#+BEGIN_SRC emacs-lisp
  (make-face-italic 'font-lock-comment-face)
#+END_SRC

Make region (selection) colors more obvious.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'region nil
                      :background "white smoke"
                      :foreground "black")
#+END_SRC

** Font

[[https://pagure.io/liberation-fonts][Liberation Fonts]] are pretty dope.  Be sure you have them installed.

#+BEGIN_SRC emacs-lisp
  ;; TODO make this compatiable with daemon/terminal/Windows emacs

  ;; SOURCE= https://www.emacswiki.org/emacs/SetFonts
  ;; (defun font-exists-p (font)
  ;;   "Check if a particular font is present on the system.

  ;; Returns a BOOLEAN"
  ;;   (if (null (x-list-fonts font))
  ;;       nil t))

  ;; (if (font-exists-p "Liberation Mono")
      (add-to-list 'default-frame-alist '(font . "Liberation Mono"));)
#+END_SRC

* Indentation
** Default

Don't use tabs.  You can still insert a tab if needed with =C-q tab=

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Use 2 space widths per indent.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

* Sane Defaults

Most of these settings come from [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnar Sveen]] or [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Daniel Mai]].

#+BEGIN_SRC emacs-lisp
  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top

  ;; Auto refresh buffers
  (global-auto-revert-mode 1)

  ;; Don't beep at me
  (setq visible-bell t)

  ;; Remove text in active region if inserting text
  (delete-selection-mode 1)

  ;; Show me empty lines after buffer end
  (set-default 'indicate-empty-lines t)

  ;; Easily navigate sillycased words
  (global-subword-mode 1)

  ;; Don't break lines for me, please
  (setq-default truncate-lines t)

  ;; Allow recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Focus the current line.
  (global-hl-line-mode t)

  ;; Display column numbers in the mode line.
  (setq column-number-mode t)

  ;; Show keystrokes in progress
  (setq echo-keystrokes 0.1)

  ;; Move files to trash when deleting
  (setq delete-by-moving-to-trash t)

  ;; Real emacs knights don't use shift to mark things
  (setq shift-select-mode nil)

  ;; Sentences do not need double spaces to end. Period.
  (set-default 'sentence-end-double-space nil)
#+END_SRC

* Custom Functions
** Mine

Insert and go to a newline from anywhere in the current line.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-n") '(lambda ()
                                 (interactive)
                                 (end-of-line)
                                 (newline-and-indent)))
#+END_SRC

Streamlink (useful for watching Twitch.tv)

#+BEGIN_SRC emacs-lisp
  (defun streamlink (link quality)
    (interactive "sLink: \nsQuality? ")
    (async-shell-command (concat "streamlink " link " " quality)))
#+END_SRC

** Borrowed

[[https://www.emacswiki.org/emacs/MoveLine][Move Line]]

#+BEGIN_SRC emacs-lisp
  (defun move-line (n)
    "Move the current line up or down by N lines."
    (interactive "p")
    (setq col (current-column))
    (beginning-of-line) (setq start (point))
    (end-of-line) (forward-char) (setq end (point))
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      ;; restore point to original column in moved line
      (forward-line -1)
      (forward-char col)))

  (defun move-line-up (n)
    "Move the current line up by N lines."
    (interactive "p")
    (move-line (if (null n) -1 (- n))))

  (defun move-line-down (n)
    "Move the current line down by N lines."
    (interactive "p")
    (move-line (if (null n) 1 n)))

  (global-set-key (kbd "M-<up>") 'move-line-up)
  (global-set-key (kbd "M-<down>") 'move-line-down)
#+END_SRC

Automatically Create Parent Directories on Visiting a New File in Emacs (credit to [[http://iqbalansari.me/blog/2014/12/07/automatically-create-parent-directories-on-visiting-a-new-file-in-emacs/][Iqbal Ansari]])

#+BEGIN_SRC emacs-lisp
  (defun my-create-non-existent-directory ()
        (let ((parent-directory (file-name-directory buffer-file-name)))
          (when (and (not (file-exists-p parent-directory))
                     (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
            (make-directory parent-directory t))))

  (add-to-list 'find-file-not-found-functions #'my-create-non-existent-directory)
#+END_SRC

editing with root-privileges -- once more ([[https://emacs-fu.blogspot.com/2013/03/editing-with-root-privileges-once-more.html][credit]])

#+BEGIN_SRC emacs-lisp
  (defun djcb-find-file-as-root ()
    "Like `ido-find-file, but automatically edit the file with
  root-privileges (using tramp/sudo), if the file is not writable by
  user."
    (interactive)
    (let ((file (ido-read-file-name "Edit as root: ")))
      (unless (file-writable-p file)
        (setq file (concat "/sudo:root@localhost:" file)))
      (find-file file)))
  ;; or some other keybinding...
  (global-set-key (kbd "C-x F") 'djcb-find-file-as-root)
#+END_SRC

Rename file and buffer ([[https://rejeep.github.io/emacs/elisp/2010/03/26/rename-file-and-buffer-in-emacs.html][credit]])

#+BEGIN_SRC emacs-lisp
  (defun rename-this-buffer-and-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (cond ((get-buffer new-name)
                 (error "A buffer named '%s' already exists!" new-name))
                (t
                 (rename-file filename new-name 1)
                 (rename-buffer new-name)
                 (set-visited-file-name new-name)
                 (set-buffer-modified-p nil)
                 (message "File '%s' successfully renamed to '%s'" name (file-name-nondirectory new-name))))))))

  (global-set-key (kbd "C-c r") 'rename-this-buffer-and-file)
#+END_SRC

* Packages

** MANUAL
*** pianobar.el

Run Pandora as an inferior process in emacs by using pianobar 

#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/workspace/elisp/pianobar.el/pianobar.el")
      (progn
        (add-to-list 'load-path "~/workspace/elisp/pianobar.el/")
        (autoload 'pianobar "pianobar" nil t)

        (add-hook 'pianobar-mode-hook '(lambda ()
                                         (setq truncate-lines nil)))))
#+END_SRC
